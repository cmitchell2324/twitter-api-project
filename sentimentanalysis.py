# -*- coding: utf-8 -*-
"""SentimentAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ExE2jW8EX34GHr94DrRZHW4irlmB7jO8
"""

# This program does sentiment analysis on Tesla stock from twitter users

#import libraries
import tweepy
from textblob import TextBlob
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
#plt.style.use('fivethirtyeight')

# create Twitter API credential variables
consumer_key = '7YUU5GoRmiwph62bRWfKYaZ3U'
consumer_secret = 'U7NNFpgEf8GGqpO8QhprX3qgICOW83zPoPJPewGH2z4pafVTDm'
bearer_token =  'AAAAAAAAAAAAAAAAAAAAAIbkVgEAAAAANITRx5KIpWMzOg6aAEVQePjr5Gc%3D15uRArYRLI3JxkeMojanF6yCsLKbrgzJQkRW4nNYb1B0E2iXsu'
access_token = '1459190233220751361-hW0Nfb2Rm2p4VzZ33GUKNYDyr7QS0D'
access_token_secret = '14JEoneCXNxToTBYFa188V2pqhyuSkZZdnntdmOQs4XGz'

# Create authentication object
authenticate = tweepy.OAuthHandler(consumer_key, consumer_secret)
#Set access token and secret
authenticate.set_access_token(access_token, access_token_secret)
# Create API object
api = tweepy.API(authenticate, wait_on_rate_limit=True)

# Gather 2000 tweets relating to tesla stock, filtering out retweets
search_term = 'biden -filter:retweets'
# Create a cursor object
# Need to fix api.search_tweets
tweets = tweepy.Cursor(api.search_tweets, q=search_term, lang='en', since='2021-12-03', tweet_mode='extended').items(2000)
# Store tweets in a variable and get the full text
all_tweets = [tweet.full_text for tweet in tweets]

# Create a dataframe to store the tweets with a column called 'Tweets'
df = pd.DataFrame(all_tweets, columns=['Tweets'])
df.head(5)

# Create a function to clean the tweets
def cleanTwt(twt):
  twt = re.sub('#biden', 'biden', twt) # Remove the # symbol
  twt = re.sub('#Biden', 'Biden', twt) # Remove the # symbol
  twt = re.sub('#[A-Za-xz0-9]+', '', twt) # Removes any string with a hashtag
  twt = re.sub('\\n', '', twt) # Remove newline characters
  twt = re.sub('https?:\/\/\S+', '', twt) # Remove URLS
  return twt

# Clean the tweets
df['Cleaned_Tweets'] = df['Tweets'].apply(cleanTwt)
df.head()

# Create a function to get the subjectivity
def getSubjectivity(twt):
  return TextBlob(twt).sentiment.subjectivity

# Create a function to get the polarity
def getPolarity(twt):
  return TextBlob(twt).sentiment.polarity

#Create new columns 'subjectivity' and 'polarity'

df['Subjectivity'] = df['Cleaned_Tweets'].apply(getSubjectivity)
df['Polarity'] = df['Cleaned_Tweets'].apply(getPolarity)

# Show data
df.head(10)

# Create a function to get the sentiment text
def getSentiment(score):
  if score < 0:
    return 'Negative'
  elif score == 0:
    return 'Neutral'
  else:
    return 'Positive'

# Create a column to store the sentiment text
df['Sentiment'] = df['Polarity'].apply(getSentiment)
df.head()

# Create a scatter plot to show the subjectivity and polarity
#plt.figure(figsize=(8,6))
for i in range(0, df.shape[0]):
  plt.scatter(df['Polarity'][i], df['Subjectivity'][i], color='Purple')
plt.title('Sentiment Analysis Scatter Plot')
plt.xlabel('Polarity')
plt.ylabel('Subjectivity')
plt.show()

# Create a bar chart to show the count of Positive, Neutral, and Negative sentiments
df['Sentiment'].value_counts().plot(kind='bar')
plt.title('Word Count of Positive, Negative, and Neutral words')
plt.xlabel('Sentiment')
plt.ylabel('Count')
plt.show()